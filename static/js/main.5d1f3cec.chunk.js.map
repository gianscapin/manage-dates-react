{"version":3,"sources":["components/Date.js","components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["Date","date","deleteDate","className","pet","owner","dateD","hour","symptoms","onClick","id","Form","createDate","useState","refreshDate","error","refreshError","refreshState","e","target","name","value","onSubmit","preventDefault","trim","uuidv4","type","placeholder","onChange","App","dateInitials","JSON","parse","localStorage","getItem","dates","saveDates","useEffect","setItem","stringify","newDates","filter","title","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d1f3cec.chunk.js","sourcesContent":["import React from 'react';\n\nconst Date = ({date, deleteDate}) => (\n    <div className=\"cita\">\n            <p>Mascota: <span>{date.pet}</span></p>\n            <p>Dueño: <span>{date.owner}</span></p>\n            <p>Fecha: <span>{date.dateD}</span></p>\n            <p>Hora: <span>{date.hour}</span></p>\n            <p>Síntomas: <span>{date.symptoms}</span></p>\n\n            <button\n                className=\"button eliminar u-full-width\"\n                onClick={() => deleteDate(date.id)}\n            >Eliminar</button>\n    </div>\n);\n \nexport default Date;","import React,{Fragment, useState} from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nconst Form = ({createDate}) => {\n\n    // Crear State de citas\n    const [date, refreshDate] = useState({\n        pet:'',\n        owner:'',\n        dateD:'',\n        hour:'',\n        symptoms:''\n    });\n\n    const [error,refreshError] = useState(false)\n\n    // función que se ejecuta cuando se escribe en el input\n    const refreshState = e=>{\n        refreshDate({\n            ...date,\n            [e.target.name]:e.target.value\n        })\n    }\n\n    // Extraer valores\n    const {pet,owner,dateD,hour,symptoms} = date;\n\n    // agregar cita por el boton\n    const submitDate = e =>{\n        e.preventDefault();\n\n        // Validar\n        if(pet.trim() === '' || owner.trim() === '' || dateD ===''|| hour ===''|| symptoms.trim()===''){\n            refreshError(true);\n            return;\n        }else{\n            refreshError(false);\n        }\n        // Asignar ID\n        date.id = uuidv4();\n\n        // Crear Cita\n        createDate(date);\n\n        // Reiniciar form\n        refreshDate({\n            pet:'',\n            owner:'',\n            dateD:'',\n            hour:'',\n            symptoms:''\n        })\n    }\n\n    return ( \n        <Fragment>\n            <h2>Crear Cita</h2>\n            {error ? <p className=\"alerta-error\">Todos los campos son obligatorios.</p>:null}\n            <form\n                onSubmit={submitDate}\n            >\n                <label>Nombre Mascota</label>\n                <input \n                    type=\"text\"\n                    name=\"pet\"\n                    className=\"u-full-width\"\n                    placeholder=\"Nombre Mascota\"\n                    onChange={refreshState}\n                    value={pet}\n                />\n                <label>Nombre Dueño</label>\n                <input \n                    type=\"text\"\n                    name=\"owner\"\n                    className=\"u-full-width\"\n                    placeholder=\"Nombre Dueño de la mascota\"\n                    onChange={refreshState}\n                    value={owner}\n                />\n                <label>Fecha</label>\n                <input \n                    type=\"date\"\n                    name=\"dateD\"\n                    className=\"u-full-width\"\n                    onChange={refreshState}\n                    value={dateD}\n                />\n                <label>Hora</label>\n                <input \n                    type=\"time\"\n                    name=\"hour\"\n                    className=\"u-full-width\"\n                    onChange={refreshState}\n                    value={hour}\n                />\n                <label>Síntomas</label>\n                <textarea\n                    className=\"u-full-width\"\n                    name=\"symptoms\"\n                    onChange={refreshState}\n                    value={symptoms}\n                ></textarea>\n                <button\n                    type=\"submit\"\n                    className=\"u-full-width button-primary\"\n                >Agregar cita</button>\n            </form>\n        </Fragment>\n     );\n}\n \nexport default Form;","import React,{Fragment, useState, useEffect} from 'react';\nimport Date from './components/Date';\nimport Form from './components/Form';\n\nfunction App() {\n\n  // citas en local storage\n\n  let dateInitials = JSON.parse(localStorage.getItem('dates'));\n  if(!dateInitials){\n    dateInitials = [];\n  }\n\n  // Array de citas\n  const [dates, saveDates] = useState(dateInitials);\n\n  // use effect para realizar operaciones cuando el state cambia\n  useEffect(()=>{\n    if(dateInitials){\n      localStorage.setItem('dates', JSON.stringify(dates));\n    }else{\n      localStorage.setItem('dates',JSON.stringify([]));\n    }\n  },[dates])\n\n  // Función que tome las citas que hay y agrege una nueva\n\n  const createDate = date =>{\n    saveDates([\n      ...dates,\n      date\n    ]);\n  }\n\n  // eliminar cita por id\n\n  const deleteDate = id =>{\n    const newDates = dates.filter(date => date.id!==id);\n    saveDates(newDates);\n  }\n\n  // Mensaje condicional\n  const title = dates.length===0 ? 'No hay citas' : 'Citas';\n\n  return (\n    <Fragment>\n    <h1>Administrador de pacientes</h1>\n\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"one-half column\">\n          <Form \n            createDate={createDate}\n          />\n        </div>\n        <div className=\"one-half column\">\n          <h2>{title}</h2>\n          {dates.map(date => (\n            <Date\n              key={date.id} \n              date={date}\n              deleteDate = {deleteDate}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n    </Fragment>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}